Challenges:

1 - duplicate box arts on Hero - solution: had to clear the gameContainer before adding cover arts...

why? The setInterval function in your code causes the contents of the gameContainer div to appear as if they persist between renders due to the way it interacts with React's rendering cycle and the timing of updates.

Here's how it happens:

The component initially renders, and during this render, the cover arts are created and appended to the gameContainer.

The setInterval function starts running after the initial render. It schedules a function to run periodically at a specified interval (in this case, every 10 seconds).

When the setInterval function runs and calls the function that moves the cover arts (moveBoxArts), it doesn't remove the existing cover arts. Instead, it adjusts their positions. The existing cover arts in the gameContainer are still there; they've just been moved to new positions.

When React triggers a re-render of the component (for example, due to a state change or other updates), it doesn't automatically remove or replace the elements within the gameContainer. The elements within gameContainer persist because they are not part of React's virtual DOM.

As a result, new cover arts are created and appended to the existing ones, which makes it appear as if they persist between renders.

To avoid this, it's a good practice to clear the container explicitly before appending new elements if you don't want the old elements to persist. This ensures that you always have a clean slate for the new content during each render.


2 - Ended up having to learn and utilize useContext API to handle state between the Hero and the Recommender components

Why? So... the user will enter the name of a game they like and it will query IGDB. and that's supposed to occur on a view component, main, that has both a <Nav /> and a <RecommenderForm />

I'm trying to figure out... how am i going to pass down props (which will contain the result of the query to the IGDB API) to the Recommender component, if 1) it's a separate Route via

        <Route path="/recommender" element={<Recommender />}></Route>

I don't think RecommenderForm has any way of being Recommender's parent right...? Unless I render Recommender somewhere in RecommenderForm's return (), which I don't want to do because again, I want recommender is going to be rendered on it's own, just with a <Nav /> component..

Would useContext be the best course of action here...? Hmmm i think the contextAPI would be the best choice. Reason being is because I can go from <Main /> to <Hero /> to <RecommenderForm /> to pass props down, but I get stuck there because I am not rendering <Recommender /> in my <RecommenderForm />'s return statement. That's just not the architecture of my app. Once the user submits their input they should be routed to /recommender. I need some way to put the result of <RecommenderForm />'s handling of the user's input and the subsequent call to the API into state, then pass that state to <Recommender /> without <Recommender /> becoming a child of <RecommenderForm />, because i don't think i have any way of doing so


3 - Will likely go to the backlog, but creating / implementing a game title input recommendation sanitizer (Levenshtein distance or Jaccard similarity???)...

why?

currently, I'm querying the database directly with whatever the user inputs. However, you must enter the name EXACTLY as its cataloged in the IGDB API database, or else you'll get nothing. I even tried typing The Legend Of Zelda: Tears of the Kingdom and it gave me undefined because I had capitalized the "o" in the first "of".... is there any way i can sanitize the input? or am i just at the mercy of the API?

4. Could not add a simple on click event listener to svg foreignObject (which is where some crucial dynamic information is rendered - the game artwork, the like/dislike buttons) - tried a million different ways, but it seems that foreignObjects are easily styled like regular DOM elements, but do NOT integrate event listeners the same way as reg dom elements. Would not even get a .addEventListener(console.log('click')) to work.

solution - used vanilla html + css to display, position, and add functionality to the items on the recommender graphic I needed to be responsive - the album artwork, the like and dislike buttons. Was hesitatnt to do so at first because I was afraid it would be difficult to make the content move/re-size responsively, but after some research i was able to make it responsive with regular html+css.

5. state would not update on click of the like button and resulted in an undefined random game title. Already had confirmGame in the dependency array for my useEffect.

solution - placing the lines if(confirmGame) {...

Why?

The reason the if (confirmGame) line seemed to fix the issue is that it effectively delays the execution of the code block inside the useEffect until after the confirmGame state has been updated to true. In React, state updates are asynchronous, which means that when you call setConfirmGame(true), React doesn't immediately update the state. Instead, it schedules the state update and then performs the update and triggers a re-render at its own discretion.

By using the useEffect with the dependency array [confirmGame], you are telling React to run the code block inside the useEffect whenever confirmGame changes. In your case, this means that it will run when confirmGame transitions from false to true.

Backlog - 

1. Fix styling for responsiveness & mobile (write media queries)

2. Tinder style swiping mechanism for matches.

3. Three.js dynamic background on hero - with periodic table example, except replacing the elements with box arts.

4. Explore a better recommendation algorithm/build one yourself? right now, relying on selecting a random index from  the IGDB similar_games array each game has in the API... but doesn't seem to be that great. 

5. Smoothen out animations on recommender...